Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statement
Rule 3     statements -> statement statements
Rule 4     statement -> declaration
Rule 5     statement -> assignment
Rule 6     statement -> if_statement
Rule 7     statement -> while_statement
Rule 8     statement -> for_statement
Rule 9     statement -> input_statement
Rule 10    statement -> increment_statement
Rule 11    declaration -> INT ID ASSIGN NUMBER SEMICOLON
Rule 12    declaration -> FLOAT ID ASSIGN DECIMAL SEMICOLON
Rule 13    declaration -> STRING ID ASSIGN TEXT SEMICOLON
Rule 14    declaration -> FLOAT ID ASSIGN NUMBER SEMICOLON
Rule 15    assignment -> ID ASSIGN expression SEMICOLON
Rule 16    if_statement -> IF LPAREN condition RPAREN LBRACE statements RBRACE
Rule 17    while_statement -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE
Rule 18    for_statement -> FOR LPAREN ID IN RANGE LPAREN NUMBER COMMA NUMBER RPAREN RPAREN LBRACE statements RBRACE
Rule 19    condition -> expression EQ expression
Rule 20    condition -> expression GT expression
Rule 21    condition -> expression LT expression
Rule 22    condition -> condition AND condition
Rule 23    expression -> NUMBER
Rule 24    expression -> DECIMAL
Rule 25    expression -> ID
Rule 26    input_statement -> INPUT LPAREN TEXT RPAREN SEMICOLON
Rule 27    increment_statement -> ID PLUS SEMICOLON

Terminals, with rules where they appear

AND                  : 22
ASSIGN               : 11 12 13 14 15
COMMA                : 18
DECIMAL              : 12 24
EQ                   : 19
FLOAT                : 12 14
FOR                  : 18
GT                   : 20
ID                   : 11 12 13 14 15 18 25 27
IF                   : 16
IN                   : 18
INPUT                : 26
INT                  : 11
LBRACE               : 16 17 18
LPAREN               : 16 17 18 18 26
LT                   : 21
NUMBER               : 11 14 18 18 23
PLUS                 : 27
RANGE                : 18
RBRACE               : 16 17 18
RPAREN               : 16 17 18 18 26
SEMICOLON            : 11 12 13 14 15 26 27
STRING               : 13
TEXT                 : 13 26
WHILE                : 17
error                : 

Nonterminals, with rules where they appear

assignment           : 5
condition            : 16 17 22 22
declaration          : 4
expression           : 15 19 19 20 20 21 21
for_statement        : 8
if_statement         : 6
increment_statement  : 10
input_statement      : 9
program              : 0
statement            : 2 3
statements           : 1 3 16 17 18
while_statement      : 7

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statement
    (3) statements -> . statement statements
    (4) statement -> . declaration
    (5) statement -> . assignment
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . for_statement
    (9) statement -> . input_statement
    (10) statement -> . increment_statement
    (11) declaration -> . INT ID ASSIGN NUMBER SEMICOLON
    (12) declaration -> . FLOAT ID ASSIGN DECIMAL SEMICOLON
    (13) declaration -> . STRING ID ASSIGN TEXT SEMICOLON
    (14) declaration -> . FLOAT ID ASSIGN NUMBER SEMICOLON
    (15) assignment -> . ID ASSIGN expression SEMICOLON
    (16) if_statement -> . IF LPAREN condition RPAREN LBRACE statements RBRACE
    (17) while_statement -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (18) for_statement -> . FOR LPAREN ID IN RANGE LPAREN NUMBER COMMA NUMBER RPAREN RPAREN LBRACE statements RBRACE
    (26) input_statement -> . INPUT LPAREN TEXT RPAREN SEMICOLON
    (27) increment_statement -> . ID PLUS SEMICOLON

    INT             shift and go to state 11
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    ID              shift and go to state 12
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    INPUT           shift and go to state 18

    program                        shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    for_statement                  shift and go to state 8
    input_statement                shift and go to state 9
    increment_statement            shift and go to state 10

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .

    $end            reduce using rule 1 (program -> statements .)


state 3

    (2) statements -> statement .
    (3) statements -> statement . statements
    (2) statements -> . statement
    (3) statements -> . statement statements
    (4) statement -> . declaration
    (5) statement -> . assignment
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . for_statement
    (9) statement -> . input_statement
    (10) statement -> . increment_statement
    (11) declaration -> . INT ID ASSIGN NUMBER SEMICOLON
    (12) declaration -> . FLOAT ID ASSIGN DECIMAL SEMICOLON
    (13) declaration -> . STRING ID ASSIGN TEXT SEMICOLON
    (14) declaration -> . FLOAT ID ASSIGN NUMBER SEMICOLON
    (15) assignment -> . ID ASSIGN expression SEMICOLON
    (16) if_statement -> . IF LPAREN condition RPAREN LBRACE statements RBRACE
    (17) while_statement -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (18) for_statement -> . FOR LPAREN ID IN RANGE LPAREN NUMBER COMMA NUMBER RPAREN RPAREN LBRACE statements RBRACE
    (26) input_statement -> . INPUT LPAREN TEXT RPAREN SEMICOLON
    (27) increment_statement -> . ID PLUS SEMICOLON

    $end            reduce using rule 2 (statements -> statement .)
    RBRACE          reduce using rule 2 (statements -> statement .)
    INT             shift and go to state 11
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    ID              shift and go to state 12
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    INPUT           shift and go to state 18

    statement                      shift and go to state 3
    statements                     shift and go to state 19
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    for_statement                  shift and go to state 8
    input_statement                shift and go to state 9
    increment_statement            shift and go to state 10

state 4

    (4) statement -> declaration .

    INT             reduce using rule 4 (statement -> declaration .)
    FLOAT           reduce using rule 4 (statement -> declaration .)
    STRING          reduce using rule 4 (statement -> declaration .)
    ID              reduce using rule 4 (statement -> declaration .)
    IF              reduce using rule 4 (statement -> declaration .)
    WHILE           reduce using rule 4 (statement -> declaration .)
    FOR             reduce using rule 4 (statement -> declaration .)
    INPUT           reduce using rule 4 (statement -> declaration .)
    $end            reduce using rule 4 (statement -> declaration .)
    RBRACE          reduce using rule 4 (statement -> declaration .)


state 5

    (5) statement -> assignment .

    INT             reduce using rule 5 (statement -> assignment .)
    FLOAT           reduce using rule 5 (statement -> assignment .)
    STRING          reduce using rule 5 (statement -> assignment .)
    ID              reduce using rule 5 (statement -> assignment .)
    IF              reduce using rule 5 (statement -> assignment .)
    WHILE           reduce using rule 5 (statement -> assignment .)
    FOR             reduce using rule 5 (statement -> assignment .)
    INPUT           reduce using rule 5 (statement -> assignment .)
    $end            reduce using rule 5 (statement -> assignment .)
    RBRACE          reduce using rule 5 (statement -> assignment .)


state 6

    (6) statement -> if_statement .

    INT             reduce using rule 6 (statement -> if_statement .)
    FLOAT           reduce using rule 6 (statement -> if_statement .)
    STRING          reduce using rule 6 (statement -> if_statement .)
    ID              reduce using rule 6 (statement -> if_statement .)
    IF              reduce using rule 6 (statement -> if_statement .)
    WHILE           reduce using rule 6 (statement -> if_statement .)
    FOR             reduce using rule 6 (statement -> if_statement .)
    INPUT           reduce using rule 6 (statement -> if_statement .)
    $end            reduce using rule 6 (statement -> if_statement .)
    RBRACE          reduce using rule 6 (statement -> if_statement .)


state 7

    (7) statement -> while_statement .

    INT             reduce using rule 7 (statement -> while_statement .)
    FLOAT           reduce using rule 7 (statement -> while_statement .)
    STRING          reduce using rule 7 (statement -> while_statement .)
    ID              reduce using rule 7 (statement -> while_statement .)
    IF              reduce using rule 7 (statement -> while_statement .)
    WHILE           reduce using rule 7 (statement -> while_statement .)
    FOR             reduce using rule 7 (statement -> while_statement .)
    INPUT           reduce using rule 7 (statement -> while_statement .)
    $end            reduce using rule 7 (statement -> while_statement .)
    RBRACE          reduce using rule 7 (statement -> while_statement .)


state 8

    (8) statement -> for_statement .

    INT             reduce using rule 8 (statement -> for_statement .)
    FLOAT           reduce using rule 8 (statement -> for_statement .)
    STRING          reduce using rule 8 (statement -> for_statement .)
    ID              reduce using rule 8 (statement -> for_statement .)
    IF              reduce using rule 8 (statement -> for_statement .)
    WHILE           reduce using rule 8 (statement -> for_statement .)
    FOR             reduce using rule 8 (statement -> for_statement .)
    INPUT           reduce using rule 8 (statement -> for_statement .)
    $end            reduce using rule 8 (statement -> for_statement .)
    RBRACE          reduce using rule 8 (statement -> for_statement .)


state 9

    (9) statement -> input_statement .

    INT             reduce using rule 9 (statement -> input_statement .)
    FLOAT           reduce using rule 9 (statement -> input_statement .)
    STRING          reduce using rule 9 (statement -> input_statement .)
    ID              reduce using rule 9 (statement -> input_statement .)
    IF              reduce using rule 9 (statement -> input_statement .)
    WHILE           reduce using rule 9 (statement -> input_statement .)
    FOR             reduce using rule 9 (statement -> input_statement .)
    INPUT           reduce using rule 9 (statement -> input_statement .)
    $end            reduce using rule 9 (statement -> input_statement .)
    RBRACE          reduce using rule 9 (statement -> input_statement .)


state 10

    (10) statement -> increment_statement .

    INT             reduce using rule 10 (statement -> increment_statement .)
    FLOAT           reduce using rule 10 (statement -> increment_statement .)
    STRING          reduce using rule 10 (statement -> increment_statement .)
    ID              reduce using rule 10 (statement -> increment_statement .)
    IF              reduce using rule 10 (statement -> increment_statement .)
    WHILE           reduce using rule 10 (statement -> increment_statement .)
    FOR             reduce using rule 10 (statement -> increment_statement .)
    INPUT           reduce using rule 10 (statement -> increment_statement .)
    $end            reduce using rule 10 (statement -> increment_statement .)
    RBRACE          reduce using rule 10 (statement -> increment_statement .)


state 11

    (11) declaration -> INT . ID ASSIGN NUMBER SEMICOLON

    ID              shift and go to state 20


state 12

    (15) assignment -> ID . ASSIGN expression SEMICOLON
    (27) increment_statement -> ID . PLUS SEMICOLON

    ASSIGN          shift and go to state 21
    PLUS            shift and go to state 22


state 13

    (12) declaration -> FLOAT . ID ASSIGN DECIMAL SEMICOLON
    (14) declaration -> FLOAT . ID ASSIGN NUMBER SEMICOLON

    ID              shift and go to state 23


state 14

    (13) declaration -> STRING . ID ASSIGN TEXT SEMICOLON

    ID              shift and go to state 24


state 15

    (16) if_statement -> IF . LPAREN condition RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 25


state 16

    (17) while_statement -> WHILE . LPAREN condition RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 26


state 17

    (18) for_statement -> FOR . LPAREN ID IN RANGE LPAREN NUMBER COMMA NUMBER RPAREN RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 27


state 18

    (26) input_statement -> INPUT . LPAREN TEXT RPAREN SEMICOLON

    LPAREN          shift and go to state 28


state 19

    (3) statements -> statement statements .

    $end            reduce using rule 3 (statements -> statement statements .)
    RBRACE          reduce using rule 3 (statements -> statement statements .)


state 20

    (11) declaration -> INT ID . ASSIGN NUMBER SEMICOLON

    ASSIGN          shift and go to state 29


state 21

    (15) assignment -> ID ASSIGN . expression SEMICOLON
    (23) expression -> . NUMBER
    (24) expression -> . DECIMAL
    (25) expression -> . ID

    NUMBER          shift and go to state 32
    DECIMAL         shift and go to state 33
    ID              shift and go to state 30

    expression                     shift and go to state 31

state 22

    (27) increment_statement -> ID PLUS . SEMICOLON

    SEMICOLON       shift and go to state 34


state 23

    (12) declaration -> FLOAT ID . ASSIGN DECIMAL SEMICOLON
    (14) declaration -> FLOAT ID . ASSIGN NUMBER SEMICOLON

    ASSIGN          shift and go to state 35


state 24

    (13) declaration -> STRING ID . ASSIGN TEXT SEMICOLON

    ASSIGN          shift and go to state 36


state 25

    (16) if_statement -> IF LPAREN . condition RPAREN LBRACE statements RBRACE
    (19) condition -> . expression EQ expression
    (20) condition -> . expression GT expression
    (21) condition -> . expression LT expression
    (22) condition -> . condition AND condition
    (23) expression -> . NUMBER
    (24) expression -> . DECIMAL
    (25) expression -> . ID

    NUMBER          shift and go to state 32
    DECIMAL         shift and go to state 33
    ID              shift and go to state 30

    condition                      shift and go to state 37
    expression                     shift and go to state 38

state 26

    (17) while_statement -> WHILE LPAREN . condition RPAREN LBRACE statements RBRACE
    (19) condition -> . expression EQ expression
    (20) condition -> . expression GT expression
    (21) condition -> . expression LT expression
    (22) condition -> . condition AND condition
    (23) expression -> . NUMBER
    (24) expression -> . DECIMAL
    (25) expression -> . ID

    NUMBER          shift and go to state 32
    DECIMAL         shift and go to state 33
    ID              shift and go to state 30

    condition                      shift and go to state 39
    expression                     shift and go to state 38

state 27

    (18) for_statement -> FOR LPAREN . ID IN RANGE LPAREN NUMBER COMMA NUMBER RPAREN RPAREN LBRACE statements RBRACE

    ID              shift and go to state 40


state 28

    (26) input_statement -> INPUT LPAREN . TEXT RPAREN SEMICOLON

    TEXT            shift and go to state 41


state 29

    (11) declaration -> INT ID ASSIGN . NUMBER SEMICOLON

    NUMBER          shift and go to state 42


state 30

    (25) expression -> ID .

    SEMICOLON       reduce using rule 25 (expression -> ID .)
    EQ              reduce using rule 25 (expression -> ID .)
    GT              reduce using rule 25 (expression -> ID .)
    LT              reduce using rule 25 (expression -> ID .)
    RPAREN          reduce using rule 25 (expression -> ID .)
    AND             reduce using rule 25 (expression -> ID .)


state 31

    (15) assignment -> ID ASSIGN expression . SEMICOLON

    SEMICOLON       shift and go to state 43


state 32

    (23) expression -> NUMBER .

    SEMICOLON       reduce using rule 23 (expression -> NUMBER .)
    EQ              reduce using rule 23 (expression -> NUMBER .)
    GT              reduce using rule 23 (expression -> NUMBER .)
    LT              reduce using rule 23 (expression -> NUMBER .)
    RPAREN          reduce using rule 23 (expression -> NUMBER .)
    AND             reduce using rule 23 (expression -> NUMBER .)


state 33

    (24) expression -> DECIMAL .

    SEMICOLON       reduce using rule 24 (expression -> DECIMAL .)
    EQ              reduce using rule 24 (expression -> DECIMAL .)
    GT              reduce using rule 24 (expression -> DECIMAL .)
    LT              reduce using rule 24 (expression -> DECIMAL .)
    RPAREN          reduce using rule 24 (expression -> DECIMAL .)
    AND             reduce using rule 24 (expression -> DECIMAL .)


state 34

    (27) increment_statement -> ID PLUS SEMICOLON .

    INT             reduce using rule 27 (increment_statement -> ID PLUS SEMICOLON .)
    FLOAT           reduce using rule 27 (increment_statement -> ID PLUS SEMICOLON .)
    STRING          reduce using rule 27 (increment_statement -> ID PLUS SEMICOLON .)
    ID              reduce using rule 27 (increment_statement -> ID PLUS SEMICOLON .)
    IF              reduce using rule 27 (increment_statement -> ID PLUS SEMICOLON .)
    WHILE           reduce using rule 27 (increment_statement -> ID PLUS SEMICOLON .)
    FOR             reduce using rule 27 (increment_statement -> ID PLUS SEMICOLON .)
    INPUT           reduce using rule 27 (increment_statement -> ID PLUS SEMICOLON .)
    $end            reduce using rule 27 (increment_statement -> ID PLUS SEMICOLON .)
    RBRACE          reduce using rule 27 (increment_statement -> ID PLUS SEMICOLON .)


state 35

    (12) declaration -> FLOAT ID ASSIGN . DECIMAL SEMICOLON
    (14) declaration -> FLOAT ID ASSIGN . NUMBER SEMICOLON

    DECIMAL         shift and go to state 44
    NUMBER          shift and go to state 45


state 36

    (13) declaration -> STRING ID ASSIGN . TEXT SEMICOLON

    TEXT            shift and go to state 46


state 37

    (16) if_statement -> IF LPAREN condition . RPAREN LBRACE statements RBRACE
    (22) condition -> condition . AND condition

    RPAREN          shift and go to state 47
    AND             shift and go to state 48


state 38

    (19) condition -> expression . EQ expression
    (20) condition -> expression . GT expression
    (21) condition -> expression . LT expression

    EQ              shift and go to state 49
    GT              shift and go to state 50
    LT              shift and go to state 51


state 39

    (17) while_statement -> WHILE LPAREN condition . RPAREN LBRACE statements RBRACE
    (22) condition -> condition . AND condition

    RPAREN          shift and go to state 52
    AND             shift and go to state 48


state 40

    (18) for_statement -> FOR LPAREN ID . IN RANGE LPAREN NUMBER COMMA NUMBER RPAREN RPAREN LBRACE statements RBRACE

    IN              shift and go to state 53


state 41

    (26) input_statement -> INPUT LPAREN TEXT . RPAREN SEMICOLON

    RPAREN          shift and go to state 54


state 42

    (11) declaration -> INT ID ASSIGN NUMBER . SEMICOLON

    SEMICOLON       shift and go to state 55


state 43

    (15) assignment -> ID ASSIGN expression SEMICOLON .

    INT             reduce using rule 15 (assignment -> ID ASSIGN expression SEMICOLON .)
    FLOAT           reduce using rule 15 (assignment -> ID ASSIGN expression SEMICOLON .)
    STRING          reduce using rule 15 (assignment -> ID ASSIGN expression SEMICOLON .)
    ID              reduce using rule 15 (assignment -> ID ASSIGN expression SEMICOLON .)
    IF              reduce using rule 15 (assignment -> ID ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 15 (assignment -> ID ASSIGN expression SEMICOLON .)
    FOR             reduce using rule 15 (assignment -> ID ASSIGN expression SEMICOLON .)
    INPUT           reduce using rule 15 (assignment -> ID ASSIGN expression SEMICOLON .)
    $end            reduce using rule 15 (assignment -> ID ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 15 (assignment -> ID ASSIGN expression SEMICOLON .)


state 44

    (12) declaration -> FLOAT ID ASSIGN DECIMAL . SEMICOLON

    SEMICOLON       shift and go to state 56


state 45

    (14) declaration -> FLOAT ID ASSIGN NUMBER . SEMICOLON

    SEMICOLON       shift and go to state 57


state 46

    (13) declaration -> STRING ID ASSIGN TEXT . SEMICOLON

    SEMICOLON       shift and go to state 58


state 47

    (16) if_statement -> IF LPAREN condition RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 59


state 48

    (22) condition -> condition AND . condition
    (19) condition -> . expression EQ expression
    (20) condition -> . expression GT expression
    (21) condition -> . expression LT expression
    (22) condition -> . condition AND condition
    (23) expression -> . NUMBER
    (24) expression -> . DECIMAL
    (25) expression -> . ID

    NUMBER          shift and go to state 32
    DECIMAL         shift and go to state 33
    ID              shift and go to state 30

    condition                      shift and go to state 60
    expression                     shift and go to state 38

state 49

    (19) condition -> expression EQ . expression
    (23) expression -> . NUMBER
    (24) expression -> . DECIMAL
    (25) expression -> . ID

    NUMBER          shift and go to state 32
    DECIMAL         shift and go to state 33
    ID              shift and go to state 30

    expression                     shift and go to state 61

state 50

    (20) condition -> expression GT . expression
    (23) expression -> . NUMBER
    (24) expression -> . DECIMAL
    (25) expression -> . ID

    NUMBER          shift and go to state 32
    DECIMAL         shift and go to state 33
    ID              shift and go to state 30

    expression                     shift and go to state 62

state 51

    (21) condition -> expression LT . expression
    (23) expression -> . NUMBER
    (24) expression -> . DECIMAL
    (25) expression -> . ID

    NUMBER          shift and go to state 32
    DECIMAL         shift and go to state 33
    ID              shift and go to state 30

    expression                     shift and go to state 63

state 52

    (17) while_statement -> WHILE LPAREN condition RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 64


state 53

    (18) for_statement -> FOR LPAREN ID IN . RANGE LPAREN NUMBER COMMA NUMBER RPAREN RPAREN LBRACE statements RBRACE

    RANGE           shift and go to state 65


state 54

    (26) input_statement -> INPUT LPAREN TEXT RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 66


state 55

    (11) declaration -> INT ID ASSIGN NUMBER SEMICOLON .

    INT             reduce using rule 11 (declaration -> INT ID ASSIGN NUMBER SEMICOLON .)
    FLOAT           reduce using rule 11 (declaration -> INT ID ASSIGN NUMBER SEMICOLON .)
    STRING          reduce using rule 11 (declaration -> INT ID ASSIGN NUMBER SEMICOLON .)
    ID              reduce using rule 11 (declaration -> INT ID ASSIGN NUMBER SEMICOLON .)
    IF              reduce using rule 11 (declaration -> INT ID ASSIGN NUMBER SEMICOLON .)
    WHILE           reduce using rule 11 (declaration -> INT ID ASSIGN NUMBER SEMICOLON .)
    FOR             reduce using rule 11 (declaration -> INT ID ASSIGN NUMBER SEMICOLON .)
    INPUT           reduce using rule 11 (declaration -> INT ID ASSIGN NUMBER SEMICOLON .)
    $end            reduce using rule 11 (declaration -> INT ID ASSIGN NUMBER SEMICOLON .)
    RBRACE          reduce using rule 11 (declaration -> INT ID ASSIGN NUMBER SEMICOLON .)


state 56

    (12) declaration -> FLOAT ID ASSIGN DECIMAL SEMICOLON .

    INT             reduce using rule 12 (declaration -> FLOAT ID ASSIGN DECIMAL SEMICOLON .)
    FLOAT           reduce using rule 12 (declaration -> FLOAT ID ASSIGN DECIMAL SEMICOLON .)
    STRING          reduce using rule 12 (declaration -> FLOAT ID ASSIGN DECIMAL SEMICOLON .)
    ID              reduce using rule 12 (declaration -> FLOAT ID ASSIGN DECIMAL SEMICOLON .)
    IF              reduce using rule 12 (declaration -> FLOAT ID ASSIGN DECIMAL SEMICOLON .)
    WHILE           reduce using rule 12 (declaration -> FLOAT ID ASSIGN DECIMAL SEMICOLON .)
    FOR             reduce using rule 12 (declaration -> FLOAT ID ASSIGN DECIMAL SEMICOLON .)
    INPUT           reduce using rule 12 (declaration -> FLOAT ID ASSIGN DECIMAL SEMICOLON .)
    $end            reduce using rule 12 (declaration -> FLOAT ID ASSIGN DECIMAL SEMICOLON .)
    RBRACE          reduce using rule 12 (declaration -> FLOAT ID ASSIGN DECIMAL SEMICOLON .)


state 57

    (14) declaration -> FLOAT ID ASSIGN NUMBER SEMICOLON .

    INT             reduce using rule 14 (declaration -> FLOAT ID ASSIGN NUMBER SEMICOLON .)
    FLOAT           reduce using rule 14 (declaration -> FLOAT ID ASSIGN NUMBER SEMICOLON .)
    STRING          reduce using rule 14 (declaration -> FLOAT ID ASSIGN NUMBER SEMICOLON .)
    ID              reduce using rule 14 (declaration -> FLOAT ID ASSIGN NUMBER SEMICOLON .)
    IF              reduce using rule 14 (declaration -> FLOAT ID ASSIGN NUMBER SEMICOLON .)
    WHILE           reduce using rule 14 (declaration -> FLOAT ID ASSIGN NUMBER SEMICOLON .)
    FOR             reduce using rule 14 (declaration -> FLOAT ID ASSIGN NUMBER SEMICOLON .)
    INPUT           reduce using rule 14 (declaration -> FLOAT ID ASSIGN NUMBER SEMICOLON .)
    $end            reduce using rule 14 (declaration -> FLOAT ID ASSIGN NUMBER SEMICOLON .)
    RBRACE          reduce using rule 14 (declaration -> FLOAT ID ASSIGN NUMBER SEMICOLON .)


state 58

    (13) declaration -> STRING ID ASSIGN TEXT SEMICOLON .

    INT             reduce using rule 13 (declaration -> STRING ID ASSIGN TEXT SEMICOLON .)
    FLOAT           reduce using rule 13 (declaration -> STRING ID ASSIGN TEXT SEMICOLON .)
    STRING          reduce using rule 13 (declaration -> STRING ID ASSIGN TEXT SEMICOLON .)
    ID              reduce using rule 13 (declaration -> STRING ID ASSIGN TEXT SEMICOLON .)
    IF              reduce using rule 13 (declaration -> STRING ID ASSIGN TEXT SEMICOLON .)
    WHILE           reduce using rule 13 (declaration -> STRING ID ASSIGN TEXT SEMICOLON .)
    FOR             reduce using rule 13 (declaration -> STRING ID ASSIGN TEXT SEMICOLON .)
    INPUT           reduce using rule 13 (declaration -> STRING ID ASSIGN TEXT SEMICOLON .)
    $end            reduce using rule 13 (declaration -> STRING ID ASSIGN TEXT SEMICOLON .)
    RBRACE          reduce using rule 13 (declaration -> STRING ID ASSIGN TEXT SEMICOLON .)


state 59

    (16) if_statement -> IF LPAREN condition RPAREN LBRACE . statements RBRACE
    (2) statements -> . statement
    (3) statements -> . statement statements
    (4) statement -> . declaration
    (5) statement -> . assignment
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . for_statement
    (9) statement -> . input_statement
    (10) statement -> . increment_statement
    (11) declaration -> . INT ID ASSIGN NUMBER SEMICOLON
    (12) declaration -> . FLOAT ID ASSIGN DECIMAL SEMICOLON
    (13) declaration -> . STRING ID ASSIGN TEXT SEMICOLON
    (14) declaration -> . FLOAT ID ASSIGN NUMBER SEMICOLON
    (15) assignment -> . ID ASSIGN expression SEMICOLON
    (16) if_statement -> . IF LPAREN condition RPAREN LBRACE statements RBRACE
    (17) while_statement -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (18) for_statement -> . FOR LPAREN ID IN RANGE LPAREN NUMBER COMMA NUMBER RPAREN RPAREN LBRACE statements RBRACE
    (26) input_statement -> . INPUT LPAREN TEXT RPAREN SEMICOLON
    (27) increment_statement -> . ID PLUS SEMICOLON

    INT             shift and go to state 11
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    ID              shift and go to state 12
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    INPUT           shift and go to state 18

    statements                     shift and go to state 67
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    for_statement                  shift and go to state 8
    input_statement                shift and go to state 9
    increment_statement            shift and go to state 10

state 60

    (22) condition -> condition AND condition .
    (22) condition -> condition . AND condition

  ! shift/reduce conflict for AND resolved as shift
    RPAREN          reduce using rule 22 (condition -> condition AND condition .)
    AND             shift and go to state 48

  ! AND             [ reduce using rule 22 (condition -> condition AND condition .) ]


state 61

    (19) condition -> expression EQ expression .

    RPAREN          reduce using rule 19 (condition -> expression EQ expression .)
    AND             reduce using rule 19 (condition -> expression EQ expression .)


state 62

    (20) condition -> expression GT expression .

    RPAREN          reduce using rule 20 (condition -> expression GT expression .)
    AND             reduce using rule 20 (condition -> expression GT expression .)


state 63

    (21) condition -> expression LT expression .

    RPAREN          reduce using rule 21 (condition -> expression LT expression .)
    AND             reduce using rule 21 (condition -> expression LT expression .)


state 64

    (17) while_statement -> WHILE LPAREN condition RPAREN LBRACE . statements RBRACE
    (2) statements -> . statement
    (3) statements -> . statement statements
    (4) statement -> . declaration
    (5) statement -> . assignment
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . for_statement
    (9) statement -> . input_statement
    (10) statement -> . increment_statement
    (11) declaration -> . INT ID ASSIGN NUMBER SEMICOLON
    (12) declaration -> . FLOAT ID ASSIGN DECIMAL SEMICOLON
    (13) declaration -> . STRING ID ASSIGN TEXT SEMICOLON
    (14) declaration -> . FLOAT ID ASSIGN NUMBER SEMICOLON
    (15) assignment -> . ID ASSIGN expression SEMICOLON
    (16) if_statement -> . IF LPAREN condition RPAREN LBRACE statements RBRACE
    (17) while_statement -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (18) for_statement -> . FOR LPAREN ID IN RANGE LPAREN NUMBER COMMA NUMBER RPAREN RPAREN LBRACE statements RBRACE
    (26) input_statement -> . INPUT LPAREN TEXT RPAREN SEMICOLON
    (27) increment_statement -> . ID PLUS SEMICOLON

    INT             shift and go to state 11
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    ID              shift and go to state 12
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    INPUT           shift and go to state 18

    statements                     shift and go to state 68
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    for_statement                  shift and go to state 8
    input_statement                shift and go to state 9
    increment_statement            shift and go to state 10

state 65

    (18) for_statement -> FOR LPAREN ID IN RANGE . LPAREN NUMBER COMMA NUMBER RPAREN RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 69


state 66

    (26) input_statement -> INPUT LPAREN TEXT RPAREN SEMICOLON .

    INT             reduce using rule 26 (input_statement -> INPUT LPAREN TEXT RPAREN SEMICOLON .)
    FLOAT           reduce using rule 26 (input_statement -> INPUT LPAREN TEXT RPAREN SEMICOLON .)
    STRING          reduce using rule 26 (input_statement -> INPUT LPAREN TEXT RPAREN SEMICOLON .)
    ID              reduce using rule 26 (input_statement -> INPUT LPAREN TEXT RPAREN SEMICOLON .)
    IF              reduce using rule 26 (input_statement -> INPUT LPAREN TEXT RPAREN SEMICOLON .)
    WHILE           reduce using rule 26 (input_statement -> INPUT LPAREN TEXT RPAREN SEMICOLON .)
    FOR             reduce using rule 26 (input_statement -> INPUT LPAREN TEXT RPAREN SEMICOLON .)
    INPUT           reduce using rule 26 (input_statement -> INPUT LPAREN TEXT RPAREN SEMICOLON .)
    $end            reduce using rule 26 (input_statement -> INPUT LPAREN TEXT RPAREN SEMICOLON .)
    RBRACE          reduce using rule 26 (input_statement -> INPUT LPAREN TEXT RPAREN SEMICOLON .)


state 67

    (16) if_statement -> IF LPAREN condition RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 70


state 68

    (17) while_statement -> WHILE LPAREN condition RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 71


state 69

    (18) for_statement -> FOR LPAREN ID IN RANGE LPAREN . NUMBER COMMA NUMBER RPAREN RPAREN LBRACE statements RBRACE

    NUMBER          shift and go to state 72


state 70

    (16) if_statement -> IF LPAREN condition RPAREN LBRACE statements RBRACE .

    INT             reduce using rule 16 (if_statement -> IF LPAREN condition RPAREN LBRACE statements RBRACE .)
    FLOAT           reduce using rule 16 (if_statement -> IF LPAREN condition RPAREN LBRACE statements RBRACE .)
    STRING          reduce using rule 16 (if_statement -> IF LPAREN condition RPAREN LBRACE statements RBRACE .)
    ID              reduce using rule 16 (if_statement -> IF LPAREN condition RPAREN LBRACE statements RBRACE .)
    IF              reduce using rule 16 (if_statement -> IF LPAREN condition RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 16 (if_statement -> IF LPAREN condition RPAREN LBRACE statements RBRACE .)
    FOR             reduce using rule 16 (if_statement -> IF LPAREN condition RPAREN LBRACE statements RBRACE .)
    INPUT           reduce using rule 16 (if_statement -> IF LPAREN condition RPAREN LBRACE statements RBRACE .)
    $end            reduce using rule 16 (if_statement -> IF LPAREN condition RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 16 (if_statement -> IF LPAREN condition RPAREN LBRACE statements RBRACE .)


state 71

    (17) while_statement -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .

    INT             reduce using rule 17 (while_statement -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    FLOAT           reduce using rule 17 (while_statement -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    STRING          reduce using rule 17 (while_statement -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    ID              reduce using rule 17 (while_statement -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    IF              reduce using rule 17 (while_statement -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 17 (while_statement -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    FOR             reduce using rule 17 (while_statement -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    INPUT           reduce using rule 17 (while_statement -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    $end            reduce using rule 17 (while_statement -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 17 (while_statement -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)


state 72

    (18) for_statement -> FOR LPAREN ID IN RANGE LPAREN NUMBER . COMMA NUMBER RPAREN RPAREN LBRACE statements RBRACE

    COMMA           shift and go to state 73


state 73

    (18) for_statement -> FOR LPAREN ID IN RANGE LPAREN NUMBER COMMA . NUMBER RPAREN RPAREN LBRACE statements RBRACE

    NUMBER          shift and go to state 74


state 74

    (18) for_statement -> FOR LPAREN ID IN RANGE LPAREN NUMBER COMMA NUMBER . RPAREN RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 75


state 75

    (18) for_statement -> FOR LPAREN ID IN RANGE LPAREN NUMBER COMMA NUMBER RPAREN . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 76


state 76

    (18) for_statement -> FOR LPAREN ID IN RANGE LPAREN NUMBER COMMA NUMBER RPAREN RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 77


state 77

    (18) for_statement -> FOR LPAREN ID IN RANGE LPAREN NUMBER COMMA NUMBER RPAREN RPAREN LBRACE . statements RBRACE
    (2) statements -> . statement
    (3) statements -> . statement statements
    (4) statement -> . declaration
    (5) statement -> . assignment
    (6) statement -> . if_statement
    (7) statement -> . while_statement
    (8) statement -> . for_statement
    (9) statement -> . input_statement
    (10) statement -> . increment_statement
    (11) declaration -> . INT ID ASSIGN NUMBER SEMICOLON
    (12) declaration -> . FLOAT ID ASSIGN DECIMAL SEMICOLON
    (13) declaration -> . STRING ID ASSIGN TEXT SEMICOLON
    (14) declaration -> . FLOAT ID ASSIGN NUMBER SEMICOLON
    (15) assignment -> . ID ASSIGN expression SEMICOLON
    (16) if_statement -> . IF LPAREN condition RPAREN LBRACE statements RBRACE
    (17) while_statement -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (18) for_statement -> . FOR LPAREN ID IN RANGE LPAREN NUMBER COMMA NUMBER RPAREN RPAREN LBRACE statements RBRACE
    (26) input_statement -> . INPUT LPAREN TEXT RPAREN SEMICOLON
    (27) increment_statement -> . ID PLUS SEMICOLON

    INT             shift and go to state 11
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    ID              shift and go to state 12
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    INPUT           shift and go to state 18

    statements                     shift and go to state 78
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if_statement                   shift and go to state 6
    while_statement                shift and go to state 7
    for_statement                  shift and go to state 8
    input_statement                shift and go to state 9
    increment_statement            shift and go to state 10

state 78

    (18) for_statement -> FOR LPAREN ID IN RANGE LPAREN NUMBER COMMA NUMBER RPAREN RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 79


state 79

    (18) for_statement -> FOR LPAREN ID IN RANGE LPAREN NUMBER COMMA NUMBER RPAREN RPAREN LBRACE statements RBRACE .

    INT             reduce using rule 18 (for_statement -> FOR LPAREN ID IN RANGE LPAREN NUMBER COMMA NUMBER RPAREN RPAREN LBRACE statements RBRACE .)
    FLOAT           reduce using rule 18 (for_statement -> FOR LPAREN ID IN RANGE LPAREN NUMBER COMMA NUMBER RPAREN RPAREN LBRACE statements RBRACE .)
    STRING          reduce using rule 18 (for_statement -> FOR LPAREN ID IN RANGE LPAREN NUMBER COMMA NUMBER RPAREN RPAREN LBRACE statements RBRACE .)
    ID              reduce using rule 18 (for_statement -> FOR LPAREN ID IN RANGE LPAREN NUMBER COMMA NUMBER RPAREN RPAREN LBRACE statements RBRACE .)
    IF              reduce using rule 18 (for_statement -> FOR LPAREN ID IN RANGE LPAREN NUMBER COMMA NUMBER RPAREN RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 18 (for_statement -> FOR LPAREN ID IN RANGE LPAREN NUMBER COMMA NUMBER RPAREN RPAREN LBRACE statements RBRACE .)
    FOR             reduce using rule 18 (for_statement -> FOR LPAREN ID IN RANGE LPAREN NUMBER COMMA NUMBER RPAREN RPAREN LBRACE statements RBRACE .)
    INPUT           reduce using rule 18 (for_statement -> FOR LPAREN ID IN RANGE LPAREN NUMBER COMMA NUMBER RPAREN RPAREN LBRACE statements RBRACE .)
    $end            reduce using rule 18 (for_statement -> FOR LPAREN ID IN RANGE LPAREN NUMBER COMMA NUMBER RPAREN RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 18 (for_statement -> FOR LPAREN ID IN RANGE LPAREN NUMBER COMMA NUMBER RPAREN RPAREN LBRACE statements RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for AND in state 60 resolved as shift
